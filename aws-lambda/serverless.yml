# Custom Authorizer global.
#
service: vdisls


provider:
  name: aws
  profile: vdi
  runtime: nodejs12.x
  stage: ${opt:stage, 'pro'}
  region: eu-west-1
  memorySize: 128
  stackTags:
    ci: "e-treball"
    UOCEnv: "${self:provider.stage}"
    Departament: "TIC"
    name: "VDI-COVID-19"
  environment:
    JWT_SECRET: ${file(~/.config/sls/${self:service}.${self:provider.stage}.json):JWT_SECRET}
    bundle_id: ${file(~/.config/sls/${self:service}.${self:provider.stage}.json):bundle_id}
    directory_id: ${file(~/.config/sls/${self:service}.${self:provider.stage}.json):directory_id}
    ci: ${file(~/.config/sls/${self:service}.${self:provider.stage}.json):ci}
    UOCEnv: ${file(~/.config/sls/${self:service}.${self:provider.stage}.json):UOCEnv}
    affiliations: ${file(~/.config/sls/${self:service}.${self:provider.stage}.json):affiliations}
    auth_mode: ${file(~/.config/sls/${self:service}.${self:provider.stage}.json):auth_mode}
    ComputeTypeName: ${file(~/.config/sls/${self:service}.${self:provider.stage}.json):ComputeTypeName}
    RunningMode: ${file(~/.config/sls/${self:service}.${self:provider.stage}.json):RunningMode}
    Departament: ${file(~/.config/sls/${self:service}.${self:provider.stage}.json):Departament}
    Name: "VDI-COVID-19"
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'workspaces:*'
      Resource: "arn:aws:workspaces:eu-west-1:${self:custom.accountId}:*"

resources:
  Resources:
    # If you reject an authorization request, you don't have the ability to specify the CORS headers in your response.
    # This can make it difficult for the client browser to understand the response.
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

environment:
  stage: dev

functions:
  provisioner:
    handler: src/provisioner.handler
    events:
      - http:
          path: /provision
          method: post
          cors: true
          authorizer:
            name: authorizerFunc
  checkProvisioner:
    handler: src/check_provisioner.handler
    events:
      - http:
          path: /check
          method: post
          cors: true

          authorizer:
            name: authorizerFunc

  authorizerFunc:
    handler: src/auth.handler

custom:
  accountId: ${file(~/.config/sls/${self:service}.${self:provider.stage}.json):account_id}
